<resources>
    <string name="app_name">TutorAndroidApp</string>
    <string name="tipos">Tipos de apps</string>
    <string name="conceptos">Conceptos Basicos</string>
    <string name="ide">Entorno INtefrado(IDE)</string>
    <string name="mvc">Modelo vista controlador</string>
    <string name="gui">Elementos de GUI</string>
    <string name="dev">Desarrollado por Jonathan Medina</string>
    <string name="acti">Qué es una Activity</string>
    <string name="acti1">Una Activity en Android se corresponde con una pantalla de nuestra App. En realidad es un punto de entrada que Android puede cargar en cualquier momento. Se compone de:</string>
    <string name="acti2"><b>*  Una clase</b>, que normalmente extiende de AppCompatActivity. Es donde definimos el código de lo que queremos que haga la App.
        <br></br><b>*  Un layout</b>, que identifica la apariencia de la vista, el diseño. Tiene formato XML, pero se puede utilizar el diseñador para hacerlo más sencillo
        <br></br><b>*  Una definición de su uso</b>, que se realiza en el AndroidManifest.</string>
    <string name="acti3">Partes de una Activity</string>
    <string name="acti4">Hay dos cosas de las que debes estar pendiente sobre las Activity, la primera es que por lo general estará compuesta por una clase</string>
    <string name="acti5">y por un archivo XML, este es un archivo con una estructura específica que nos identifica cuál es la forma que tiene esa pantalla.</string>
    <string name="acti6">Si entramos en <del>R.layout</del>.activity_main haciendo control + click en Windows nos mostrara de forma visual nuestra pantalla.</string>
    <string name="acti7">Tenemos varias formas de trabajar con esto, puedes dividir la pantalla para trabajar con el editor de código y la pantalla de diseño. En esta pantalla tendremos sus componentes pero por ahora no te pierdes con los nombres de las vistas como textos, botones, imágenes, entre otros, ya que todo lo estaremos viendo en otros apartados.</string>
    <string name="acti8">lo siguiente es que si nos vamos a la carpeta de <b>manifest</b> situada en la parte lateral izquierda y entramos en el android manifest.</string>
    <string name="acti9">Este archivo vendría siendo una configuración de alto nivel de lo que hace nuestra aplicación y aquí definimos distintas cosas, por ejemplo en la etiqueta label identificamos el nombre de la aplicación:</string>
    <string name="acti10">y cuando se lanza la aplicación, también tenemos el icono para identificar nuestra app que por defecto nos crea uno pero esto en el futuro ya veremos cómo podemos cambiarlo, el tema que es el que nos da la apariencia a nuestra aplicación y algunas configuraciones.</string>
    <string name="acti11">No olvides que este archivo es donde se configura a alto nivel, que eso es lo que va a hacer nuestra aplicación, y luego le tenemos que indicar cuáles son esas pantallas que va a utilizar esos puntos de entrada que mencionábamos que son las Activitys; Así que mediante este pequeño XML se le identifica que esta Activity forma parte de esta aplicación; Si no añadimos la Activity aquí no vamos a tener forma de utilizarla dentro de nuestro proyecto.</string>
    <string name="acti12">después el ejemplo a continuación</string>
    <string name="acti13">vamos a tener varias Activitys en nuestra aplicación, con estos valores identificamos que esta es la Activity Principal, para que cuando le demos al botón de arrancar sea la que nos va a lanzar primero.</string>
    <string name="acti14">Conceptos de programación</string>
    <string name="acti15">En este apartado no voy a profundizar porque lo veremos en otro articulo pero te voy a explicar a grandes rasgos qué es cada cosa, por un lado tendríamos los conceptos de:
        <br></br><b>*  Clase:</b> una clase vendría a ser una representación de un elemento de la vida real.
        <br></br><b>*  Herencia:</b> es la capacidad que tiene una clase hijo de tener las propiedades o métodos del padre, así como en la vida real, cuando heredamos el color de ojos de nuestro padre, altura, capacidades físicas y que nosotros podemos extender mas allá de lo que nuestro padre nos heredo.
        <br></br><b>*  Override:</b> cuando queremos cambiar una función de la clase padre hace uso de override para agregar la funcionalidad deseada.
        <br></br><b>*  Función:</b> trozo de código al que podemos llamar para que se ejecuta una acción o estados, que son valores de esa clase, que puede almacenar para luego hacer cosas con ellos. Podemos ejecutar llamando al nombre de esa función, de tal forma que podemos guardar cosas más complicadas en una única función y esa función la podemos llamar desde distintos sitios y reutilizar esa parte del código.
        <br></br><b>*  Variable:</b> una variable es un elemento que guarda un valor de forma temporal.
        <br></br>*  De una única clase se pueden generar un número ilimitado de objetos. Normalmente a estos objetos se les llama instancias específicas de una clase, de tal forma que si los objetos tienen distintos estados, por ejemplo: una clase Persona la cual tendrá un nombre y una edad. Teniendo el nombre y la edad de esa clase podemos crear dos objetos, un objeto 1 del tipo persona y otro objeto 2 del tipo persona también, por ende se puede modificar el estado de cada objeto sin afectar al otro.</string>
    <string name="acti16">Cuál es el ciclo de vida de una Activity</string>
    <string name="acti17">Es una serie de pasos por las que va pasando la pantalla en función del estado en el que se encuentra:

        <br></br><b>*  onCreate():</b> es el primero paso, lo primero que se llama nada más crearse la Activity
        <br></br><b>*  onStart():</b> cuando la activity se inicia. Se llama siempre que se llama a onCreate(), pero no al revés. onStart() se puede llamar cuando la activity pasa a un segundo plano y vuelve a estar visible
        <br></br><b>*  onResume():</b> cuando la activity se reanuda. Se llama siempre que se llama a onStart(), pero no al revés. onResume() se puede llamar cuando algo se pone por encima de nuestra activity (por ejemplo un diálogo), pero la activity se sigue viendo. Al recuperar el control, se llama a onResume()
        <br></br><b>*  onPause():</b> el opuesto de onResume(). Se llama cuando algo se pone por encima de la activity, pero esta se sigue viendo.
        <br></br><b>*  onStop():</b> el opuesto de onStart(). Se llama cuando la App se va a segundo plano, o se lanza otra activity por encima.
        <br></br><b>*  onDestroy():</b> el opuesto de onCreate(). Se llama cuando la Activity se destruye. Es lo último que se llamará antes de que la activity desaparezca.
        <br></br>*  En función de las tareas que estemos ejecutando, nos interesará lanzarlos en un paso del ciclo de vida o en otro. Se pararán en su opuesto.</string>
    <string name="acti18">Modificando el texto</string>
    <string name="acti19">Te dejo como ejercicio en el onCreate() recuperar la vista del texto del layout y modificar su texto. En el vídeo tienes la explicación y la solución. El resultado sería:</string>
    <string name="acti20">En él también te explico por encima algunos conceptos importantes, como qué es una clase, una función y una variable. Profundizaremos más en esto en el futuro.</string>
    <string name="acti21">Las activities son probablemente el component más importante en una App Android, así que te animo a que cojas soltura con ellas y entiendas cómo funcionan.
        <br></br>Seguiremos viendo muchas más cosas en el futuro, pero por ahora quédate con que cada Activity define una pantalla, y que necesitas usarlas para representar los pasos de tu App.</string>
</resources>